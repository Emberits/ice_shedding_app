import streamlit as st
import pandas as pd
import numpy as np
import joblib
import folium
import streamlit_folium as st_folium  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    return joblib.load("model.pkl")

model = load_model()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã—Ö
def get_weather_data(city, api_key):
    base_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
    try:
        response = requests.get(base_url)
        response.raise_for_status()
        data = response.json()
        
        temperature = data["main"]["temp"] - 273.15  # –ö–µ–ª—å–≤–∏–Ω—ã ‚Üí ¬∞C
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]
        cloudiness = data.get("clouds", {}).get("all", 0)
        precipitation = data.get("rain", {}).get("1h", 0)
        
        return {
            "temperature": round(temperature, 2),
            "humidity": humidity,
            "wind_speed": wind_speed,
            "precipitation": precipitation,
            "cloudiness": cloudiness
        }
    except Exception as e:
        st.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ–ª—â–∏–Ω—ã –ª—å–¥–∞
def estimate_ice_thickness(temp, humidity, wind_speed, cloudiness):
    es = 610.78 * np.exp((21.87 * temp) / (temp + 265.5))  # –î–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞ –Ω–∞–¥ –ª—å–¥–æ–º
    ea = 610.78 * np.exp((21.87 * (temp + 2)) / (temp + 265.5)) * humidity / 100  # –î–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞ –≤ –≤–æ–∑–¥—É—Ö–µ
    cp = 1005  # –£–¥–µ–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ—ë–º–∫–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞
    pa = 101325  # –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    h = 0.024 * 10  # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–∞
    I = h * (es - ea) * 0.62 / (cp * pa)  # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ª—å–¥–∞
    ice_thickness = max(I * 3600, 0)  # –ó–∞ 1 —á–∞—Å
    return round(ice_thickness, 2)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞
def compute_wire_bounce(ice_thickness, wire_diameter, span_length):
    bounce = 0.02 * ice_thickness * wire_diameter * (span_length / 100)
    bounce -= wind_speed * 0.05  # –î–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ
    return max(round(bounce, 2), 0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞", layout="centered")
st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–ª–ø–æ–≤–æ–º —Å–±—Ä–æ—Å–µ –ª—å–¥–∞")

# –ü–æ–ª—è –≤–≤–æ–¥–∞
city = st.text_input("üèôÔ∏è –ì–æ—Ä–æ–¥", value="Moscow")
api_key = st.text_input("üîë OpenWeatherMap API Key", type="password")
wire_diameter = st.number_input("üìè –î–∏–∞–º–µ—Ç—Ä –ø—Ä–æ–≤–æ–¥–∞ (–º–º)", value=12.7, step=0.1)
span_length = st.number_input("üìê –î–ª–∏–Ω–∞ –ø—Ä–æ–ª—ë—Ç–∞ (–º)", value=300, step=1)

if st.button("üîÑ –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã–µ"):
    if not api_key:
        st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")
    else:
        weather = get_weather_data(city, api_key)
        if weather:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏—é
            st.session_state.weather = weather
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
            st.json(weather)

if "weather" in st.session_state:
    weather = st.session_state.weather
    temperature = weather["temperature"]
    wind_speed = weather["wind_speed"]
    humidity = weather["humidity"]
    precipitation = weather["precipitation"]
    cloudiness = weather["cloudiness"]
    
    # –†–∞—Å—á—ë—Ç —Ç–æ–ª—â–∏–Ω—ã –ª—å–¥–∞
    ice_thickness = estimate_ice_thickness(temperature, humidity, wind_speed, cloudiness)
    progress_value = min(max(int(ice_thickness * 5), 0), 100)
    st.success(f"‚úÖ –û—Ü–µ–Ω—ë–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª—å–¥–∞: {ice_thickness} –º–º")
    st.progress(progress_value)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
    input_data = pd.DataFrame({
        "temperature": [temperature],
        "wind_speed": [wind_speed],
        "humidity": [humidity],
        "ice_thickness": [ice_thickness],
        "precipitation": [precipitation],
        "cloudiness": [cloudiness],
        "wire_diameter": [wire_diameter],
        "span_length": [span_length]
    })
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ ML
    try:
        ml_prob = model.predict_proba(input_data)[0][1]
        ml_risk = "–í—ã—Å–æ–∫–∏–π" if ml_prob > 0.7 else "–°—Ä–µ–¥–Ω–∏–π" if ml_prob > 0.4 else "–ù–∏–∑–∫–∏–π"
    except Exception:
        ml_prob = 0.0
        ml_risk = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –†–∞—Å—á—ë—Ç –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞
    bounce = compute_wire_bounce(ice_thickness, wire_diameter, span_length)
    bounce_risk = "–í—ã—Å–æ–∫–∏–π" if bounce > 1.0 else "–°—Ä–µ–¥–Ω–∏–π" if bounce > 0.5 else "–ù–∏–∑–∫–∏–π"
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫
    combined_risk = "–í—ã—Å–æ–∫–∏–π" if ml_risk == "–í—ã—Å–æ–∫–∏–π" or bounce_risk == "–í—ã—Å–æ–∫–∏–π" else "–°—Ä–µ–¥–Ω–∏–π" if ml_risk == "–°—Ä–µ–¥–Ω–∏–π" or bounce_risk == "–°—Ä–µ–¥–Ω–∏–π" else "–ù–∏–∑–∫–∏–π"
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.info(f"üîÑ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞: {ml_prob * 100:.0f}%")
    st.warning(f"‚ö†Ô∏è –†–∏—Å–∫ —Å–±—Ä–æ—Å–∞: {ml_risk}")
    st.success(f"üìâ –ê–º–ø–ª–∏—Ç—É–¥–∞ –ø–æ–¥—Å–∫–æ–∫–∞: {bounce} –º")
    st.error(f"‚ö†Ô∏è –†–∏—Å–∫ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è: {bounce_risk}")
    st.success(f"üìä –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: {combined_risk}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–∏—Å–∫–æ–≤
st.markdown("### üåç –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫–∞–º –õ–≠–ü")
try:
    segments = pd.read_csv("segments.csv")
    m = folium.Map(location=[55.75, 37.62], zoom_start=5)

    for _, row in segments.iterrows():
        name = row['name']
        lat = row['lat']
        lon = row['lon']
        risk = row['risk']

        color = 'red' if risk == '–í—ã—Å–æ–∫–∏–π' else 'orange' if risk == '–°—Ä–µ–¥–Ω–∏–π' else 'green'
        folium.Marker([lat, lon], popup=name, icon=folium.Icon(color=color)).add_to(m)

    st_folium.folium_static(m)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ st_folium
except Exception as e:
    st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–∫–∞—Ö –õ–≠–ü. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `segments.csv`.")
