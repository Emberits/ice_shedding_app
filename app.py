import streamlit as st
import pandas as pd
import numpy as np
import joblib

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    return joblib.load("model.pkl")

model = load_model()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞", layout="centered")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–ª–ø–æ–≤–æ–º —Å–±—Ä–æ—Å–µ –ª—å–¥–∞")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–æ–≥–Ω–æ–∑**, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫.")

# –ü–æ–ª—è –≤–≤–æ–¥–∞
temperature = st.number_input("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=-5.0, step=0.1)
wind_speed = st.number_input("üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)", value=10.0, step=0.1)
humidity = st.number_input("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", value=85, step=1)
wire_diameter = st.number_input("üìè –î–∏–∞–º–µ—Ç—Ä –ø—Ä–æ–≤–æ–¥–∞ (–º–º)", value=12.7, step=0.1)
span_length = st.number_input("üìê –î–ª–∏–Ω–∞ –ø—Ä–æ–ª—ë—Ç–∞ (–º)", value=300, step=1)
temp_change_last_6h = st.number_input("üìà –ü–µ—Ä–µ–ø–∞–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ 6 —á (¬∞C)", value=2.0, step=0.1)
precipitation = st.number_input("üåßÔ∏è –û—Å–∞–¥–∫–∏ –∑–∞ 6 —á (–º–º)", value=0.5, step=0.1)

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ–ª—â–∏–Ω—ã –ª—å–¥–∞
def estimate_ice_thickness(temp, humidity, wind_speed, hours=24):
    k = 0.05  # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    ice_thickness = k * wind_speed * humidity * (1 - abs(temp)/10) * (hours/24)
    return round(ice_thickness, 2)

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Å–±—Ä–æ—Å–∞
def shedding_potential(temp_change, precipitation, wind_speed):
    base = 0.5
    temp_factor = temp_change * 0.2
    precip_factor = precipitation * 0.15
    wind_factor = wind_speed * 0.1
    total = base + temp_factor + precip_factor + wind_factor
    return min(round(total, 2), 1.0)

# –§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞
def compute_wire_bounce(ice_thickness, wire_diameter, span_length):
    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã –ø–æ–¥—Å–∫–æ–∫–∞ (–º)
    bounce = 0.02 * ice_thickness * wire_diameter * (span_length / 100)
    return round(bounce, 2)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
if st.button("üìä –ü—Ä–æ–≥–Ω–æ–∑"):
    # –†–∞—Å—á–µ—Ç—ã
    ice_thickness = estimate_ice_thickness(temperature, humidity, wind_speed)
    ice_thickness = max(ice_thickness, 0)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    shedding_prob = shedding_potential(temp_change_last_6h, precipitation, wind_speed)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ ML
    input_data = pd.DataFrame({
        "temperature": [temperature],
        "wind_speed": [wind_speed],
        "humidity": [humidity],
        "ice_thickness": [ice_thickness],
        "temp_change_last_6h": [temp_change_last_6h],
        "precipitation": [precipitation],
        "wire_diameter": [wire_diameter],
        "span_length": [span_length]
    })
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ ML
    ml_prob = model.predict_proba(input_data)[0][1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞
    ml_risk = "–í—ã—Å–æ–∫–∏–π" if ml_prob > 0.7 else "–°—Ä–µ–¥–Ω–∏–π" if ml_prob > 0.4 else "–ù–∏–∑–∫–∏–π"
    
    # –†–∞—Å—á—ë—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã –ø–æ–¥—Å–∫–æ–∫–∞
    bounce = compute_wire_bounce(ice_thickness, wire_diameter, span_length)
    bounce_risk = "–í—ã—Å–æ–∫–∏–π" if bounce > 1.0 else "–°—Ä–µ–¥–Ω–∏–π" if bounce > 0.5 else "–ù–∏–∑–∫–∏–π"
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∏—Å–∫–∞
    combined_risk = (ml_prob + shedding_prob) / 2
    combined_risk_label = "–í—ã—Å–æ–∫–∏–π" if combined_risk > 0.7 else "–°—Ä–µ–¥–Ω–∏–π" if combined_risk > 0.4 else "–ù–∏–∑–∫–∏–π"
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.success(f"‚úÖ –û—Ü–µ–Ω—ë–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª—å–¥–∞: {ice_thickness} –º–º")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    progress_value = min(max(int(ice_thickness * 5), 0), 100)
    st.progress(progress_value)
    
    st.info(f"üîÑ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–±—Ä–æ—Å–∞: {shedding_prob * 100:.0f}%")
    st.warning(f"ü§ñ –ú–æ–¥–µ–ª—å ML: {ml_risk} —Ä–∏—Å–∫ —Å–±—Ä–æ—Å–∞ ({ml_prob * 100:.0f}%)")
    st.success(f"üìâ –ê–º–ø–ª–∏—Ç—É–¥–∞ –ø–æ–¥—Å–∫–æ–∫–∞: {bounce} –º")
    st.error(f"‚ö†Ô∏è –†–∏—Å–∫ –ö–ó: {bounce_risk}")
    st.success(f"üìä –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: {combined_risk_label}")
