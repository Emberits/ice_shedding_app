import streamlit as st
import pandas as pd
import numpy as np
import joblib
import folium
from streamlit_folium import folium_static

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    return joblib.load("model.pkl")

model = load_model()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–∫–∞—Ö –õ–≠–ü
@st.cache_data
def load_segments():
    return pd.read_csv("segments.csv")

segments = load_segments()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–∞—Ä—Ç–∞ —Ä–∏—Å–∫–æ–≤ –õ–≠–ü", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–∏—Å–∫–æ–≤ –õ–≠–ü")
st.markdown("–ö–∞—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—á–∞—Å—Ç–∫–∏ –≤–æ–∑–¥—É—à–Ω—ã—Ö –ª–∏–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–ø–µ—Ä–µ–¥–∞—á–∏ —Å —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞ –∑–∞–ª–ø–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ª—å–¥–∞.")

# –ü–æ–ª—è –≤–≤–æ–¥–∞
temperature = st.number_input("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=-5.0, step=0.1)
wind_speed = st.number_input("üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)", value=10.0, step=0.1)
humidity = st.number_input("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", value=85, step=1)
wire_diameter = st.number_input("üìè –î–∏–∞–º–µ—Ç—Ä –ø—Ä–æ–≤–æ–¥–∞ (–º–º)", value=12.7, step=0.1)
span_length = st.number_input("üìê –î–ª–∏–Ω–∞ –ø—Ä–æ–ª—ë—Ç–∞ (–º)", value=300, step=1)
temp_change_last_6h = st.number_input("üìà –ü–µ—Ä–µ–ø–∞–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ 6 —á (¬∞C)", value=2.0, step=0.1)
precipitation = st.number_input("üåßÔ∏è –û—Å–∞–¥–∫–∏ –∑–∞ 6 —á (–º–º)", value=0.5, step=0.1)

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ–ª—â–∏–Ω—ã –ª—å–¥–∞
def estimate_ice_thickness(temp, humidity, wind_speed, hours=24):
    k = 0.05  # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    ice_thickness = k * wind_speed * humidity * (1 - abs(temp)/10) * (hours/24)
    return round(ice_thickness, 2)

# –§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–æ–¥—Å–∫–æ–∫–∞ –ø—Ä–æ–≤–æ–¥–∞
def compute_wire_bounce(ice_thickness, wire_diameter, span_length):
    bounce = 0.02 * ice_thickness * wire_diameter * (span_length / 100)
    return round(bounce, 2)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
if st.button("üìä –ü—Ä–æ–≥–Ω–æ–∑"):
    # –†–∞—Å—á–µ—Ç—ã
    ice_thickness = estimate_ice_thickness(temperature, humidity, wind_speed)
    ice_thickness = max(ice_thickness, 0)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ ML
    input_data = pd.DataFrame({
        "temperature": [temperature],
        "wind_speed": [wind_speed],
        "humidity": [humidity],
        "ice_thickness": [ice_thickness],
        "temp_change_last_6h": [temp_change_last_6h],
        "precipitation": [precipitation],
        "wire_diameter": [wire_diameter],
        "span_length": [span_length]
    })
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ ML
    ml_prob = model.predict_proba(input_data)[0][1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞
    ml_risk = "–í—ã—Å–æ–∫–∏–π" if ml_prob > 0.7 else "–°—Ä–µ–¥–Ω–∏–π" if ml_prob > 0.4 else "–ù–∏–∑–∫–∏–π"
    
    # –†–∞—Å—á—ë—Ç –∞–º–ø–ª–∏—Ç—É–¥—ã –ø–æ–¥—Å–∫–æ–∫–∞
    bounce = compute_wire_bounce(ice_thickness, wire_diameter, span_length)
    bounce_risk = "–í—ã—Å–æ–∫–∏–π" if bounce > 1.0 else "–°—Ä–µ–¥–Ω–∏–π" if bounce > 0.5 else "–ù–∏–∑–∫–∏–π"
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫
    combined_risk = "–í—ã—Å–æ–∫–∏–π" if ml_risk == "–í—ã—Å–æ–∫–∏–π" or bounce_risk == "–í—ã—Å–æ–∫–∏–π" else "–°—Ä–µ–¥–Ω–∏–π" if ml_risk == "–°—Ä–µ–¥–Ω–∏–π" or bounce_risk == "–°—Ä–µ–¥–Ω–∏–π" else "–ù–∏–∑–∫–∏–π"
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.success(f"‚úÖ –û—Ü–µ–Ω—ë–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª—å–¥–∞: {ice_thickness} –º–º")
    st.info(f"üîÑ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞: {ml_prob * 100:.0f}%")
    st.warning(f"‚ö†Ô∏è –†–∏—Å–∫ —Å–±—Ä–æ—Å–∞: {ml_risk}")
    st.success(f"üìâ –ê–º–ø–ª–∏—Ç—É–¥–∞ –ø–æ–¥—Å–∫–æ–∫–∞: {bounce} –º")
    st.error(f"‚ö†Ô∏è –†–∏—Å–∫ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è: {bounce_risk}")
    st.success(f"üìä –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: {combined_risk}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–∏—Å–∫–æ–≤
st.markdown("### üåç –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫–∞–º –õ–≠–ü")
try:
    m = folium.Map(location=[55.75, 37.62], zoom_start=5)

    for _, row in segments.iterrows():
        name = row['name']
        lat = row['lat']
        lon = row['lon']
        risk = row['risk']

        # –¶–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∏—Å–∫–∞
        if risk == '–í—ã—Å–æ–∫–∏–π':
            color = 'red'
        elif risk == '–°—Ä–µ–¥–Ω–∏–π':
            color = 'orange'
        else:
            color = 'green'

        folium.Marker(
            [lat, lon],
            popup=name,
            icon=folium.Icon(color=color, icon='info-sign')
        ).add_to(m)

    folium_static(m)
except Exception as e:
    st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–∫–∞—Ö –õ–≠–ü. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `segments.csv`.")
